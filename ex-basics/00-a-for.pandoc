### A: For-loop [0]

1. There are a multitude of possibilities, one of the solutions could be:

~~~ {#loop .go .numberLines startFrom="1"} 
!Insert ex-basics/src/for.go
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    % go run for.go
    % ./for
    0
    1
    .
    .
    .
    9

2. Rewriting the loop results in code that should look something
    like this (only showing the `main`-function):

~~~ {.go .numberLines startFrom="1"} 
func main() {
        i := 0		// Define our loop variable
I:			// Define a label
        fmt.Printf("%d\n", i)
        i++ 
        if i < 10 {
                goto I	// Jump back to the label
        }   
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

3. The following is one possible solution:

~~~ {.go .numberLines startFrom="1"} 
!Insert ex-basics/src/for-arr.go
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You could even do this in one fell swoop by using a composite literal:

~~~ {.go }
a := [...]int{0,1,2,3,4,5,6,7,8,9} // With [...] you let Go count
fmt.Printf("%v\n", a)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
