>> "I am interested in this and hope to do something."

> *On adding complex numbers to Go*, **KEN THOMPSON**

What is Go? From the website [-@go_web]:

> The Go programming language is an open source project to make
> programmers more productive. Go is expressive, concise, clean, and
> efficient. Its concurrency mechanisms make it easy to write programs
> that get the most out of multi core and networked machines, while its
> novel type system enables flexible and modular program construction. Go
> compiles quickly to machine code yet has the convenience of garbage
> collection and the power of run-time reflection. It's a fast, statically
> typed, compiled language that feels like a dynamically typed,
> interpreted language.

Go 1 is the first stable release of the language Go. 
This document and all exercises work with Go 1 -- if not, it's a bug.

The following convention is used throughout this book
^[This of course depends to what output format it has been converted.]:

* Code is displayed in a `monospace font`;
* Keywords are displayed a `monospace font`;
* Comments (in code) are displayed in *italics*
* Longer remarks get a number -- \gocircle{1} -- with the explanation following;
* Shell examples use a `%` as prompt;

## Official documentation
There is already a substantial amount of documentation written about Go.
^[When searching on the internet use the term "golang" instead of plain "go".]
The Go Tutorial [-@go_tutorial], and the Effective Go
document [-@effective_go]. The
website <http://golang.org/doc/> is a very good starting point
for reading up on Go 
^[The website <http://golang.org/doc/> itself is served by `godoc`.]. Reading these documents is
certainly not required, but it is recommended.

Go 1 comes with its own documentation in the form of a program called 
`go doc`. If you are interested in the documentation
for [the built-ins](#builtins) you
can fire it up, like so:

    % go doc builtin

How to create your own package documentation is explained [in chapter](#packages).

## Origins
Go has it origins in Inferno [-@inferno] (which in turn was based
upon Plan 9 [-@plan9]). Inferno included a language called Limbo
[-@limbo]. Quoting from the Limbo paper:

> Limbo is a programming language intended for applications running
> distributed systems on small computers. It supports modular programming,
> strong type checking at compile- and run-time, *inter process*
> *communication over typed channels*, automatic *garbage collection*, and
> simple abstract data types. It is designed for safe execution even on
> small machines without hardware memory protection.

A feature Go inherited from Limbo is channels ([see chapter](#channels))
TODO(mg)
Again from the Limbo documentation:

> [A channel] is a communication mechanism capable of sending and receiving objects of
> the specified type to another agent in the system. Channels may be used
> to communicate between local processes; using library procedures, they
> may be connected to named destinations. In either case send and receive
> operations may be directed to them.

The channels in Go are easier to use than those in Limbo.
If we dig deeper into the history of Go we also find references
to "Newsqueak" [@newsqueak], which pioneered the use of 
channel communication in a C--like language. Channels
aren't unique to these languages; a big non--C--like
language which uses them is Erlang [@erlang].

![Chronology of Go.](fig/go-history.png)

The whole of idea of using channels to communicate with other processes
is called Communicating Sequential Processes (CSP) and was conceived
by C. A. R. Hoare [@hoare], who incidentally is the same man that
invented QuickSort [@quicksort].

Go is the first C--like language that is widely available,
runs on many different platforms and makes concurrency easy (or easier).

## Getting Go
In this section we explain how to install Go locally on your machine, but you can
also compile Go code online at <http://play.golang.org/>. To quickly
play with code this is by far the easiest route.

You can also get pre-compiled binaries from [-@go_install].

Ubuntu and Debian both have a Go package in their repositories (look for
the package "golang").

Here we will stick to the installation from source.
So we will have to retrieve the code from the mercurial archive and compile
Go yourself. For other Unix-like systems the procedure is the same.

* First install Mercurial (to get the `hg` command). In
    Ubuntu/Debian/Fedora you must install the `mercurial` package;

* For building Go you need the packages: 
    `bison`, `gcc`, `libc6-dev`, `ed`, `gawk` and `make`;

* Set the environment variable `GOROOT` to the root of your
    Go install:

        % export GOROOT=~/go

* Then retrieve the latest release (= Go 1) source code:

        % hg clone -r release https://go.googlecode.com/hg/ $GOROOT

* Set your PATH to so that the shell can find the Go binaries:

        % export PATH=$GOROOT/bin:$PATH

* Compile Go:

        % cd $GOROOT/src
        % ./all.bash

If all goes well, you should see the following at the end:

    --- cd ../test
    0 known bugs; 0 unexpected bugs

    ALL TESTS PASSED

    ---
    Installed Go for linux/amd64 in /home/go
    Installed commands in /home/go/bin


## Getting Go for Windows
The best way is to follow the instructions from [@go_install], which are repeated
here for your convience.

* Download Go 1 from:
    <http://code.google.com/p/go/downloads/list?q=OpSys-Windows+Type%3DArchive>;
* Unpack it to your `C:\` drive;
* Make sure that the contents are `C:\Go`. Note: this directory should be
    created when you unpacked the zip;
* Add `C:\Go\bin` to your \$PATH:

        set PATH=\verb|%PATH%;C:\Go\bin|

!Insert ex-intro/ex-doc.pandoc
